{"version":3,"sources":["webpack:///src/app/pages/settings/settings-routing.module.ts","webpack:///src/app/pages/settings/settings.module.ts","webpack:///src/app/pages/settings/settings/settings-container.component.ts","webpack:///src/app/pages/settings/settings/settings-container.component.html"],"names":["routes","path","component","data","title","SettingsRoutingModule","forChild","imports","exports","SettingsModule","declarations","SettingsContainerComponent","store","routeAnimationsElements","themes","value","label","languages","settings$","pipe","language","dispatch","key","checked","testApi","theme","autoNightMode","stickyHeader","pageAnimations","elementsAnimations","selector","templateUrl","styleUrls","changeDetection","OnPush"],"mappings":"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","file":"pages-settings-settings-module-es5.js","sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { SettingsContainerComponent } from \"./settings/settings-container.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: SettingsContainerComponent,\n    data: { title: \"ww.menu.settings\" }\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SettingsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { SharedModule } from \"../../shared/shared.module\";\n\nimport { SettingsRoutingModule } from \"./settings-routing.module\";\nimport { SettingsContainerComponent } from \"./settings/settings-container.component\";\n\n@NgModule({\n  declarations: [SettingsContainerComponent],\n  imports: [CommonModule, SharedModule, SettingsRoutingModule]\n})\nexport class SettingsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from \"@angular/core\";\nimport { Store, select } from \"@ngrx/store\";\nimport { Observable } from \"rxjs\";\n\nimport { marker } from \"@biesbjerg/ngx-translate-extract-marker\";\n\nimport { ROUTE_ANIMATIONS_ELEMENTS } from \"../../../core/core.module\";\n\nimport {\n  actionSettingsChangeAnimationsElements,\n  actionSettingsChangeAnimationsPage,\n  actionSettingsChangeAutoNightMode,\n  actionSettingsChangeLanguage,\n  actionSettingsChangeLevel,\n  actionSettingsChangeHighlight,\n  actionSettingsChangeTestApi,\n  actionSettingsChangeTheme,\n  actionSettingsChangeStickyHeader\n} from \"../../../core/settings/settings.actions\";\nimport { SettingsState, State } from \"../../../core/settings/settings.model\";\nimport { selectSettings } from \"../../../core/settings/settings.selectors\";\n\n@Component({\n  selector: \"ww-settings\",\n  templateUrl: \"./settings-container.component.html\",\n  styleUrls: [\"./settings-container.component.scss\"],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SettingsContainerComponent implements OnInit {\n  routeAnimationsElements = ROUTE_ANIMATIONS_ELEMENTS;\n  settings$: Observable<SettingsState>;\n\n  themes = [\n    { value: \"DEFAULT-THEME\", label: marker(\"ww.settings.themes.blue\") },\n    { value: \"LIGHT-THEME\", label: marker(\"ww.settings.themes.light\") },\n    { value: \"NATURE-THEME\", label: marker(\"ww.settings.themes.nature\") },\n    { value: \"BLACK-THEME\", label: marker(\"ww.settings.themes.dark\") },\n    { value: \"MONKEY-THEME\", label: marker(\"ww.settings.themes.fun\") }\n  ];\n\n  languages = [\n    { value: \"en\", label: marker(\"ww.settings.general.language.en\") },\n    { value: \"fr\", label: marker(\"ww.settings.general.language.fr\") }\n  ];\n\n  constructor(private store: Store<State>) {}\n\n  ngOnInit() {\n    this.settings$ = this.store.pipe(select(selectSettings));\n  }\n\n  onLanguageSelect({ value: language }) {\n    this.store.dispatch(actionSettingsChangeLanguage({ language }));\n  }\n\n  onLevelSelect({ checked }, key: string) {\n    this.store.dispatch(actionSettingsChangeLevel({ checked, key }));\n  }\n\n  onHighlightSelect({ checked }, key: string) {\n    this.store.dispatch(actionSettingsChangeHighlight({ checked, key }));\n  }\n\n  onTestApiToggle({ checked: testApi }) {\n    this.store.dispatch(actionSettingsChangeTestApi({ testApi }));\n  }\n\n  onThemeSelect({ value: theme }) {\n    this.store.dispatch(actionSettingsChangeTheme({ theme }));\n  }\n\n  onAutoNightModeToggle({ checked: autoNightMode }) {\n    this.store.dispatch(actionSettingsChangeAutoNightMode({ autoNightMode }));\n  }\n\n  onStickyHeaderToggle({ checked: stickyHeader }) {\n    this.store.dispatch(actionSettingsChangeStickyHeader({ stickyHeader }));\n  }\n\n  onPageAnimationsToggle({ checked: pageAnimations }) {\n    this.store.dispatch(actionSettingsChangeAnimationsPage({ pageAnimations }));\n  }\n\n  onElementsAnimationsToggle({ checked: elementsAnimations }) {\n    this.store.dispatch(\n      actionSettingsChangeAnimationsElements({ elementsAnimations })\n    );\n  }\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-sm-12\">\n      <h1>{{ 'ww.settings.title' | translate }}</h1>\n    </div>\n  </div>\n  <br>\n  <ng-container *ngIf=\"settings$ | async as settings\">\n    <div class='row'>\n      <div class='col-md-6 group' [ngClass]='routeAnimationsElements'>\n        <h2>{{ 'ww.settings.general.highlighting.title' | translate }}</h2>\n        <div class='icon-form-field checkboxes'>\n          <mat-checkbox class=\"pronouns\" [checked]=\"settings.highlight.pronoun\"\n            (change)=\"onHighlightSelect($event, 'pronoun')\">\n            {{ 'ww.settings.general.highlighting.pronouns' | translate }}\n          </mat-checkbox>\n          <mat-checkbox class=\"root\" [checked]=\"settings.highlight.root\" (change)=\"onHighlightSelect($event, 'root')\">\n            {{ 'ww.settings.general.highlighting.verb' | translate }}\n          </mat-checkbox>\n          <mat-checkbox class=\"aspect\" [checked]=\"settings.highlight.aspect\"\n            (change)=\"onHighlightSelect($event, 'aspect')\">\n            {{ 'ww.settings.general.highlighting.aspect' | translate }}\n          </mat-checkbox>\n          <mat-checkbox class=\"prepronominal_prefix\" [checked]=\"settings.highlight.prepronominal_prefix\"\n            (change)=\"onHighlightSelect($event, 'prepronominal_prefix')\">\n            {{ 'ww.settings.general.highlighting.required' | translate }}\n          </mat-checkbox>\n          <mat-checkbox class=\"tmp_affix\" [checked]=\"settings.highlight.tmp_affix\"\n            (change)=\"onHighlightSelect($event, 'tmp_affix')\">\n            {{ 'ww.settings.general.highlighting.temp' | translate }}\n          </mat-checkbox>\n          <mat-checkbox class=\"post_aspectual_suffix\" [checked]=\"settings.highlight.post_aspectual_suffix\"\n            (change)=\"onHighlightSelect($event, 'post_aspectual_suffix')\">\n            {{ 'ww.settings.general.highlighting.post-aspectual' | translate }}\n          </mat-checkbox>\n        </div>\n      </div>\n    </div>\n    <br>\n    <br>\n    <br>\n    <div class='row'>\n      <div class='col-md-6 group' [ngClass]='routeAnimationsElements'>\n        <h2>{{ 'ww.settings.general.tiers.title' | translate }}</h2>\n        <div class='icon-form-field checkboxes'>\n          <mat-checkbox [checked]=\"settings.level.gloss\" (change)=\"onLevelSelect($event, 'gloss')\">\n            {{ 'ww.settings.general.tiers.gloss' | translate }}\n          </mat-checkbox>\n          <mat-checkbox [checked]=\"settings.level.breakdown\" (change)=\"onLevelSelect($event, 'breakdown')\">\n            {{ 'ww.settings.general.tiers.breakdown' | translate }}\n          </mat-checkbox>\n          <mat-checkbox [checked]=\"settings.level['breakdown-translation']\"\n            (change)=\"onLevelSelect($event, 'breakdown-translation')\">\n            {{ 'ww.settings.general.tiers.breakdown-translation' | translate }}\n          </mat-checkbox>\n          <mat-checkbox [checked]=\"settings.level.translation\" (change)=\"onLevelSelect($event, 'translation')\">\n            {{ 'ww.settings.general.tiers.translation' | translate }}\n          </mat-checkbox>\n        </div>\n      </div>\n    </div>\n    <br>\n    <br>\n    <div class=\"row\">\n      <div class=\"col-md-6 group\" [ngClass]=\"routeAnimationsElements\">\n        <h2>{{ 'ww.settings.general.title' | translate }}</h2>\n        <div class=\"icon-form-field\">\n          <mat-icon color=\"accent\">\n            <fa-icon icon=\"language\" color=\"accent\"></fa-icon>\n          </mat-icon>\n          <mat-form-field>\n            <mat-select [placeholder]=\"'ww.settings.general.placeholder' | translate\" [ngModel]=\"settings.language\"\n              (selectionChange)=\"onLanguageSelect($event)\" name=\"language\">\n              <mat-option *ngFor=\"let l of languages\" [value]=\"l.value\">\n                {{  l.label | translate }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n        <div class=\"icon-form-field\">\n          <mat-icon color=\"accent\">\n            <fa-icon icon=\"bars\" color=\"accent\"></fa-icon>\n          </mat-icon>\n          <mat-placeholder>{{ 'ww.settings.themes.sticky-header' | translate }}\n          </mat-placeholder>\n          <mat-slide-toggle [checked]=\"settings.stickyHeader\" (change)=\"onStickyHeaderToggle($event)\">\n          </mat-slide-toggle>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-6 group\" [ngClass]=\"routeAnimationsElements\">\n        <h2>{{ 'ww.settings.themes.title' | translate }}</h2>\n        <div class=\"icon-form-field\">\n          <mat-icon color=\"accent\">\n            <fa-icon icon=\"paint-brush\" color=\"accent\"></fa-icon>\n          </mat-icon>\n          <mat-form-field>\n            <mat-select [placeholder]=\"'ww.settings.themes.placeholder' | translate\" [ngModel]=\"settings.theme\"\n              (selectionChange)=\"onThemeSelect($event)\" name=\"themes\">\n              <mat-option *ngFor=\"let t of themes\" [value]=\"t.value\">\n                {{ t.label | translate }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n        <div class=\"icon-form-field\">\n          <mat-icon color=\"accent\">\n            <fa-icon icon=\"lightbulb\" color=\"accent\"></fa-icon>\n          </mat-icon>\n          <mat-placeholder>{{ 'ww.settings.themes.night-mode' | translate }}\n          </mat-placeholder>\n          <mat-slide-toggle [checked]=\"settings.autoNightMode\" (change)=\"onAutoNightModeToggle($event)\">\n          </mat-slide-toggle>\n        </div>\n        <div class=\"icon-form-field\">\n          <mat-placeholder>{{ 'ww.settings.advanced' | translate }}\n          </mat-placeholder>\n          <mat-slide-toggle [checked]=\"settings.testApi\" (change)=\"onTestApiToggle($event)\">\n            {{ 'ww.settings.testApi' | translate}}\n          </mat-slide-toggle>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</div>"]}